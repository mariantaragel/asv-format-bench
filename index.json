{"project": "FormatBench", "project_url": "https://github.com/mariantaragel/asv_format_bench", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"13": "e3931929f6001574ec9ae671954e6305608d7b79"}, "revision_to_date": {"13": 1713709578000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Xeon(R) Silver 4314 CPU @ 2.40GHz"], "machine": ["trafficgpu1"], "num_cpu": ["64"], "os": ["Linux 5.15.0-101-generic"], "ram": ["263708528"], "python": ["3.10"], "pandas": [""], "numpy": [""], "dask[complete]": [""], "dask-expr": [""], "pyarrow": [""], "tables": [""], "lxml": [""], "openpyxl": [""], "pylance": [""], "fastavro": [""], "pillow": [""], "h5py": [""], "lmdb": [""], "datasets": [""], "distributed": [""], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Silver 4314 CPU @ 2.40GHz", "machine": "trafficgpu1", "num_cpu": "64", "os": "Linux 5.15.0-101-generic", "ram": "263708528", "python": "3.10", "pandas": "", "numpy": "", "dask[complete]": "", "dask-expr": "", "pyarrow": "", "tables": "", "lxml": "", "openpyxl": "", "pylance": "", "fastavro": "", "pillow": "", "h5py": "", "lmdb": "", "datasets": "", "distributed": "", "branch": "main"}], "benchmarks": {"Compression.peakmem_read": {"code": "class Compression:\n    def peakmem_read(self, format, compression):\n        format.read()\n\n    def setup(self, format, compression):\n        format.save(self.ds.df, compression)", "name": "Compression.peakmem_read", "param_names": ["Data format", "Compression"], "params": [["HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC"], ["'lz4'", "'zstd'"]], "pretty_name": "Peak Memory Reading", "type": "peakmemory", "unit": "bytes", "version": "897a334076d09ee73bb9cd54b445c2332f3abaa20878215c60cd963c006b45ce"}, "Compression.peakmem_save": {"code": "class Compression:\n    def peakmem_save(self, format, compression):\n        format.save(self.ds.df, compression)\n\n    def setup(self, format, compression):\n        format.save(self.ds.df, compression)", "name": "Compression.peakmem_save", "param_names": ["Data format", "Compression"], "params": [["HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC"], ["'lz4'", "'zstd'"]], "pretty_name": "Peak Memory Saving", "type": "peakmemory", "unit": "bytes", "version": "cf93d5432edf56b4fb3172fa3317485e06eda7fefbf1dbd9500bdc5391b5d90f"}, "Compression.time_read": {"code": "class Compression:\n    def time_read(self, format, compression):\n        format.read()\n\n    def setup(self, format, compression):\n        format.save(self.ds.df, compression)", "min_run_count": 2, "name": "Compression.time_read", "number": 0, "param_names": ["Data format", "Compression"], "params": [["HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC"], ["'lz4'", "'zstd'"]], "pretty_name": "Reading time", "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "12ef75da8900fcfa315db2ae4f2bab81927559aaa9c2bf7ed992eaca2bac5ed7", "warmup_time": -1}, "Compression.time_save": {"code": "class Compression:\n    def time_save(self, format, compression):\n        format.save(self.ds.df, compression)\n\n    def setup(self, format, compression):\n        format.save(self.ds.df, compression)", "min_run_count": 2, "name": "Compression.time_save", "number": 0, "param_names": ["Data format", "Compression"], "params": [["HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC"], ["'lz4'", "'zstd'"]], "pretty_name": "Saving time", "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "650ad5883cd4a6e168c206d33ae248f8ae0c4866373f4f775988809962a1fadc", "warmup_time": -1}, "Compression.track_size": {"code": "class Compression:\n    def track_size(self, format, compression):\n        return format.size()\n\n    def setup(self, format, compression):\n        format.save(self.ds.df, compression)", "name": "Compression.track_size", "param_names": ["Data format", "Compression"], "params": [["HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC"], ["'lz4'", "'zstd'"]], "pretty_name": "Total size", "type": "memory", "unit": "bytes", "version": "e89c3ac9d5e0bcbef7031b8741a1e4fbe6f8b7eb8ece62b4739b902834ea6faa"}, "Tabular.peakmem_read": {"code": "class Tabular:\n    def peakmem_read(self, format, ds):\n        format.read()\n\n    def setup(self, format, ds):\n        format.save(ds.df)", "name": "Tabular.peakmem_read", "param_names": ["Data format", "Dataset"], "params": [["CSV", "JSON", "XML", "HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC", "Pickle", "Excel", "Lance", "Avro"], ["int", "float"]], "pretty_name": "Peak Memory Reading", "type": "peakmemory", "unit": "bytes", "version": "5f0c18dae1fc5b9f021a8af6aced095e22bc62f361e4ff4fd5e91049ba0e6d91"}, "Tabular.peakmem_save": {"code": "class Tabular:\n    def peakmem_save(self, format, ds):\n        format.save(ds.df)\n\n    def setup(self, format, ds):\n        format.save(ds.df)", "name": "Tabular.peakmem_save", "param_names": ["Data format", "Dataset"], "params": [["CSV", "JSON", "XML", "HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC", "Pickle", "Excel", "Lance", "Avro"], ["int", "float"]], "pretty_name": "Peak Memory Saving", "type": "peakmemory", "unit": "bytes", "version": "fdb4c4cd8141eef79e9f7860ee748dde6c75be381e96f166eb50cfc7259678f8"}, "Tabular.time_read": {"code": "class Tabular:\n    def time_read(self, format, ds):\n        format.read()\n\n    def setup(self, format, ds):\n        format.save(ds.df)", "min_run_count": 2, "name": "Tabular.time_read", "number": 0, "param_names": ["Data format", "Dataset"], "params": [["CSV", "JSON", "XML", "HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC", "Pickle", "Excel", "Lance", "Avro"], ["int", "float"]], "pretty_name": "Reading time", "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b2be5fd54be171eac568e94e4ba8395474db2307920d955263f5b94597cb4bc6", "warmup_time": -1}, "Tabular.time_save": {"code": "class Tabular:\n    def time_save(self, format, ds):\n        format.save(ds.df)\n\n    def setup(self, format, ds):\n        format.save(ds.df)", "min_run_count": 2, "name": "Tabular.time_save", "number": 0, "param_names": ["Data format", "Dataset"], "params": [["CSV", "JSON", "XML", "HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC", "Pickle", "Excel", "Lance", "Avro"], ["int", "float"]], "pretty_name": "Saving time", "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "293b0f48eb14088845ba6d9bbd3d2541baef4d22a2fd964a73b08445ada53c33", "warmup_time": -1}, "Tabular.track_size": {"code": "class Tabular:\n    def track_size(self, format, ds):\n        return format.size()\n\n    def setup(self, format, ds):\n        format.save(ds.df)", "name": "Tabular.track_size", "param_names": ["Data format", "Dataset"], "params": [["CSV", "JSON", "XML", "HDF5.fixed", "HDF5.table", "Parquet", "Feather", "ORC", "Pickle", "Excel", "Lance", "Avro"], ["int", "float"]], "pretty_name": "Total size", "type": "memory", "unit": "bytes", "version": "4ee5b8021d4fda4418d37e6a14f745819379afd421ab669d1a01f66ab852d0bb"}}, "machines": {"trafficgpu1": {"arch": "x86_64", "cpu": "Intel(R) Xeon(R) Silver 4314 CPU @ 2.40GHz", "machine": "trafficgpu1", "num_cpu": "64", "os": "Linux 5.15.0-101-generic", "ram": "263708528", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}